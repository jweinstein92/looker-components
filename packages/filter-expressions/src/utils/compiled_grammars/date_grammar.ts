// @ts-nocheck
// @generated by Peggy 4.2.0.
//
// https://peggyjs.org/


function peg$subclass(child, parent) {
  function C() { this.constructor = child; }
  C.prototype = parent.prototype;
  child.prototype = new C();
}

function peg$SyntaxError(message, expected, found, location) {
  var self = Error.call(this, message);
  // istanbul ignore next Check is a necessary evil to support older environments
  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(self, peg$SyntaxError.prototype);
  }
  self.expected = expected;
  self.found = found;
  self.location = location;
  self.name = "SyntaxError";
  return self;
}

peg$subclass(peg$SyntaxError, Error);

function peg$padEnd(str, targetLength, padString) {
  padString = padString || " ";
  if (str.length > targetLength) { return str; }
  targetLength -= str.length;
  padString += padString.repeat(targetLength);
  return str + padString.slice(0, targetLength);
}

peg$SyntaxError.prototype.format = function(sources) {
  var str = "Error: " + this.message;
  if (this.location) {
    var src = null;
    var k;
    for (k = 0; k < sources.length; k++) {
      if (sources[k].source === this.location.source) {
        src = sources[k].text.split(/\r\n|\n|\r/g);
        break;
      }
    }
    var s = this.location.start;
    var offset_s = (this.location.source && (typeof this.location.source.offset === "function"))
      ? this.location.source.offset(s)
      : s;
    var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
    if (src) {
      var e = this.location.end;
      var filler = peg$padEnd("", offset_s.line.toString().length, ' ');
      var line = src[s.line - 1];
      var last = s.line === e.line ? e.column : line.length + 1;
      var hatLen = (last - s.column) || 1;
      str += "\n --> " + loc + "\n"
          + filler + " |\n"
          + offset_s.line + " | " + line + "\n"
          + filler + " | " + peg$padEnd("", s.column - 1, ' ')
          + peg$padEnd("", hatLen, "^");
    } else {
      str += "\n at " + loc;
    }
  }
  return str;
};

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function(expectation) {
      return "\"" + literalEscape(expectation.text) + "\"";
    },

    class: function(expectation) {
      var escapedParts = expectation.parts.map(function(part) {
        return Array.isArray(part)
          ? classEscape(part[0]) + "-" + classEscape(part[1])
          : classEscape(part);
      });

      return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
    },

    any: function() {
      return "any character";
    },

    end: function() {
      return "end of input";
    },

    other: function(expectation) {
      return expectation.description;
    }
  };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/"/g,  "\\\"")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/\]/g, "\\]")
      .replace(/\^/g, "\\^")
      .replace(/-/g,  "\\-")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = expected.map(describeExpectation);
    var i, j;

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  var peg$FAILED = {};
  var peg$source = options.grammarSource;

  var peg$startRuleFunctions = { EXPRESSION: peg$parseEXPRESSION };
  var peg$startRuleFunction = peg$parseEXPRESSION;

  var peg$c0 = ">";
  var peg$c1 = "=";
  var peg$c2 = "and";
  var peg$c3 = "<";
  var peg$c4 = "or";
  var peg$c5 = "(";
  var peg$c6 = "-inf";
  var peg$c7 = "inf";
  var peg$c8 = ")";
  var peg$c9 = "to";
  var peg$c10 = "null";
  var peg$c11 = ",";
  var peg$c12 = "not";
  var peg$c13 = "!=";
  var peg$c14 = "<>";
  var peg$c15 = ">=";
  var peg$c16 = "<=";
  var peg$c17 = "{{";
  var peg$c18 = "_user_attributes[";
  var peg$c19 = "]";
  var peg$c20 = "}}";
  var peg$c21 = "'";
  var peg$c22 = "\"";
  var peg$c23 = ".";
  var peg$c24 = "-";
  var peg$c25 = "+";
  var peg$c26 = "0";

  var peg$r0 = /^[([]/;
  var peg$r1 = /^[)\]]/;
  var peg$r2 = /^[A-Za-z0-9_]/;
  var peg$r3 = /^[1-9]/;
  var peg$r4 = /^[eE]/;
  var peg$r5 = /^[+\-]/;
  var peg$r6 = /^[0-9]/;
  var peg$r7 = /^[ \t\n\r]/;

  var peg$e0 = peg$literalExpectation(">", false);
  var peg$e1 = peg$literalExpectation("=", false);
  var peg$e2 = peg$literalExpectation("AND", true);
  var peg$e3 = peg$literalExpectation("<", false);
  var peg$e4 = peg$literalExpectation("OR", true);
  var peg$e5 = peg$literalExpectation("(", false);
  var peg$e6 = peg$literalExpectation("-inf", false);
  var peg$e7 = peg$literalExpectation("inf", false);
  var peg$e8 = peg$literalExpectation(")", false);
  var peg$e9 = peg$literalExpectation("to", true);
  var peg$e10 = peg$literalExpectation("NULL", true);
  var peg$e11 = peg$literalExpectation(",", false);
  var peg$e12 = peg$classExpectation(["(", "["], false, false);
  var peg$e13 = peg$classExpectation([")", "]"], false, false);
  var peg$e14 = peg$literalExpectation("NOT", true);
  var peg$e15 = peg$literalExpectation("!=", false);
  var peg$e16 = peg$literalExpectation("<>", false);
  var peg$e17 = peg$literalExpectation(">=", false);
  var peg$e18 = peg$literalExpectation("<=", false);
  var peg$e19 = peg$literalExpectation("{{", false);
  var peg$e20 = peg$literalExpectation("_user_attributes[", false);
  var peg$e21 = peg$literalExpectation("]", false);
  var peg$e22 = peg$literalExpectation("}}", false);
  var peg$e23 = peg$literalExpectation("'", false);
  var peg$e24 = peg$literalExpectation("\"", false);
  var peg$e25 = peg$classExpectation([["A", "Z"], ["a", "z"], ["0", "9"], "_"], false, false);
  var peg$e26 = peg$otherExpectation("number");
  var peg$e27 = peg$otherExpectation("positive");
  var peg$e28 = peg$otherExpectation("positive integer");
  var peg$e29 = peg$otherExpectation("integer");
  var peg$e30 = peg$literalExpectation("not", true);
  var peg$e31 = peg$literalExpectation(".", false);
  var peg$e32 = peg$classExpectation([["1", "9"]], false, false);
  var peg$e33 = peg$classExpectation(["e", "E"], false, false);
  var peg$e34 = peg$classExpectation(["+", "-"], false, false);
  var peg$e35 = peg$literalExpectation("-", false);
  var peg$e36 = peg$literalExpectation("+", false);
  var peg$e37 = peg$literalExpectation("0", false);
  var peg$e38 = peg$classExpectation([["0", "9"]], false, false);
  var peg$e39 = peg$otherExpectation("whitespace");
  var peg$e40 = peg$otherExpectation("space");
  var peg$e41 = peg$classExpectation([" ", "\t", "\n", "\r"], false, false);

  var peg$f0 = function(left, type, right) {
  return {
     type: type.toLowerCase(),
       left:left,
       right:right
   }
};
  var peg$f1 = function(not, term) {
  const is = not ? false : true
  return Object.assign({is:is}, term)
};
  var peg$f2 = function(not, term) {
  term.is = not ? false : true
  return term
};
  var peg$f3 = function(value) {
  return {
     type: '=',
     value: [value]
   }
};
  var peg$f4 = function(first, n1, second, n2) {
  const open = first ? "[" : "("
  const close = second ? "]" : ")"
  return {
    type: 'between',
    bounds: open + close,
    first: first,
    second: second,
    low: n1,
    high: n2
  }
};
  var peg$f5 = function(first, n1, second, n2) {
  //const open = ["(", "["][first.length-1]
  //const close = [")", "]"][second.length-1]
  const open = second ? "[" : "("
  const close = first ? "]" : ")"
  return {
    type: 'between',
    bounds: open + close,
    low: n2,
    high: n1
  }
};
  var peg$f6 = function(first, n1, second, n2) {
  const open = first ? "[" : "("
  const close = second ? "]" : ")"
  return {
    type: 'between',
    bounds: open + close,
    low: n1,
    high: n2,
    is: false
  }
};
  var peg$f7 = function(first, n1, second, n2) {
  const open = second ? "[" : "("
  const close = first ? "]" : ")"
  return {
    type: 'between',
    bounds: open + close,
    low: n2,
    high: n1,
    is: false
  }
};
  var peg$f8 = function(open, left, right, close) {
  return {
    type: 'between',
      bounds: open + close,
      low: left,
      high: right
  }
};
  var peg$f9 = function(open, left, close) {
      const type = open == '(' ? '>' : '>='
      const value = [left]
      return {type:type, value:value}
};
  var peg$f10 = function(open, right, close) {
      const type = close == ')' ? '<' : '<='
      const value = [right]
      return {type:type, value:value}
 };
  var peg$f11 = function(right, close) {
      const type = close == ')' ? '<' : '<='
      const value = [right]
      return {type:type, value:value}
 };
  var peg$f12 = function(open, left) {
      const type = open == '(' ? '>' : '>='
      const value = [left]
      return {type:type, value:value}
 };
  var peg$f13 = function(begin, end) {
    if(begin && end) {
       return {
           type: 'between',
           bounds: '[]',
           low: begin,
           high: end
       }
    }

     if(begin) {
       return {
          type: '>=',
          value: [begin.trim()]
       }
     }

     if(end) {
       return {
          type: '<=',
          value: [end.trim()]
       }
     }
     expected('number before or after to')
  };
  var peg$f14 = function(symbol, value) {
   return {
      type: symbol,
      value: [value]
   }
 };
  var peg$f15 = function(type) {
     return  {
       type: type.toLowerCase()
     }
   };
  var peg$f16 = function() { return "," };
  var peg$f17 = function() { return 'not' };
  var peg$f18 = function(attributeName) {
  return {type:'user_attribute', attributeName: attributeName, is: true}
};
  var peg$f19 = function(word) {
  return word
};
  var peg$f20 = function(word) {
  return word
};
  var peg$f21 = function(chars) {
	return chars.join("")
    };
  var peg$f22 = function() { return getNumberFromString(text()); };
  var peg$f23 = function() { return getNumberFromString(text()); };
  var peg$f24 = function() { return getNumberFromString(text()); };
  var peg$f25 = function() { return getNumberFromString(text()); };
  var peg$f26 = function() { return getNumberFromString(text()); };
  var peg$currPos = options.peg$currPos | 0;
  var peg$savedPos = peg$currPos;
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
  var peg$maxFailPos = peg$currPos;
  var peg$maxFailExpected = options.peg$maxFailExpected || [];
  var peg$silentFails = options.peg$silentFails | 0;

  var peg$result;

  if (options.startRule) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function offset() {
    return peg$savedPos;
  }

  function range() {
    return {
      source: peg$source,
      start: peg$savedPos,
      end: peg$currPos
    };
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos];
    var p;

    if (details) {
      return details;
    } else {
      if (pos >= peg$posDetailsCache.length) {
        p = peg$posDetailsCache.length - 1;
      } else {
        p = pos;
        while (!peg$posDetailsCache[--p]) {}
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos, endPos, offset) {
    var startPosDetails = peg$computePosDetails(startPos);
    var endPosDetails = peg$computePosDetails(endPos);

    var res = {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
    if (offset && peg$source && (typeof peg$source.offset === "function")) {
      res.start = peg$source.offset(res.start);
      res.end = peg$source.offset(res.end);
    }
    return res;
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parseEXPRESSION() {
    var s0;

    s0 = peg$parseLOGICAL_EXPRESSION();
    if (s0 === peg$FAILED) {
      s0 = peg$parseTERM();
    }

    return s0;
  }

  function peg$parseLOGICAL_EXPRESSION() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseTERM();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseLOGIC_SYMBOL();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseEXPRESSION();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f0(s1, s3, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTERM() {
    var s0, s1, s2, s3;

    s0 = peg$parseUSER_ATTRIBUTE();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseNOT_SYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseSPACE();
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      s2 = peg$parseNULLS();
      if (s2 === peg$FAILED) {
        s2 = peg$parseCOMP_INTERVALS();
        if (s2 === peg$FAILED) {
          s2 = peg$parseCOMPARISON();
          if (s2 === peg$FAILED) {
            s2 = peg$parseTO();
            if (s2 === peg$FAILED) {
              s2 = peg$parseVALUE();
            }
          }
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f1(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseNOT_SYMBOL();
        if (s1 === peg$FAILED) {
          s1 = null;
        }
        s2 = peg$parseSPACE();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        s3 = peg$parseINTERVAL();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f2(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parseVALUE() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsenumber();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f3(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseCOMP_INTERVALS() {
    var s0;

    s0 = peg$parseINTERVAL_COMP1();
    if (s0 === peg$FAILED) {
      s0 = peg$parseINTERVAL_COMP2();
      if (s0 === peg$FAILED) {
        s0 = peg$parseINTERVAL_COMP3();
        if (s0 === peg$FAILED) {
          s0 = peg$parseINTERVAL_COMP4();
        }
      }
    }

    return s0;
  }

  function peg$parseINTERVAL_COMP1() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 62) {
      s1 = peg$c0;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 61) {
        s2 = peg$c1;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parse_();
      s4 = peg$parsenumber();
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        s6 = input.substr(peg$currPos, 3);
        if (s6.toLowerCase() === peg$c2) {
          peg$currPos += 3;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e2); }
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 60) {
            s8 = peg$c3;
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e3); }
          }
          if (s8 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s9 = peg$c1;
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e1); }
            }
            if (s9 === peg$FAILED) {
              s9 = null;
            }
            s10 = peg$parsenumber();
            if (s10 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f4(s2, s4, s9, s10);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseINTERVAL_COMP2() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 60) {
      s1 = peg$c3;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e3); }
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 61) {
        s2 = peg$c1;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parse_();
      s4 = peg$parsenumber();
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        s6 = input.substr(peg$currPos, 3);
        if (s6.toLowerCase() === peg$c2) {
          peg$currPos += 3;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e2); }
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 62) {
            s8 = peg$c0;
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e0); }
          }
          if (s8 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s9 = peg$c1;
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e1); }
            }
            if (s9 === peg$FAILED) {
              s9 = null;
            }
            s10 = peg$parsenumber();
            if (s10 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f5(s2, s4, s9, s10);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseINTERVAL_COMP3() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 60) {
      s1 = peg$c3;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e3); }
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 61) {
        s2 = peg$c1;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parse_();
      s4 = peg$parsenumber();
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        s6 = input.substr(peg$currPos, 2);
        if (s6.toLowerCase() === peg$c4) {
          peg$currPos += 2;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e4); }
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 62) {
            s8 = peg$c0;
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e0); }
          }
          if (s8 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s9 = peg$c1;
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e1); }
            }
            if (s9 === peg$FAILED) {
              s9 = null;
            }
            s10 = peg$parsenumber();
            if (s10 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f6(s2, s4, s9, s10);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseINTERVAL_COMP4() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 62) {
      s1 = peg$c0;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 61) {
        s2 = peg$c1;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parse_();
      s4 = peg$parsenumber();
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        s6 = input.substr(peg$currPos, 2);
        if (s6.toLowerCase() === peg$c4) {
          peg$currPos += 2;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e4); }
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 60) {
            s8 = peg$c3;
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e3); }
          }
          if (s8 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s9 = peg$c1;
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e1); }
            }
            if (s9 === peg$FAILED) {
              s9 = null;
            }
            s10 = peg$parsenumber();
            if (s10 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f7(s2, s4, s9, s10);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseINTERVAL() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$parseOPEN();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parsenumber();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseCOMMA();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parsenumber();
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            s9 = peg$parseCLOSE();
            if (s9 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f8(s1, s3, s7, s9);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseOPEN();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parsenumber();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          s5 = peg$parseCOMMA();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            s7 = peg$parseCLOSE();
            if (s7 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f9(s1, s3, s7);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseOPEN();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          s3 = peg$parseCOMMA();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            s5 = peg$parsenumber();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              s7 = peg$parseCLOSE();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f10(s1, s5, s7);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 40) {
            s1 = peg$c5;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e5); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            if (input.substr(peg$currPos, 4) === peg$c6) {
              s3 = peg$c6;
              peg$currPos += 4;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e6); }
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              s5 = peg$parseCOMMA();
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                s7 = peg$parsenumber();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parse_();
                  s9 = peg$parseCLOSE();
                  if (s9 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f11(s7, s9);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseOPEN();
            if (s1 !== peg$FAILED) {
              s2 = peg$parse_();
              s3 = peg$parsenumber();
              if (s3 !== peg$FAILED) {
                s4 = peg$parse_();
                s5 = peg$parseCOMMA();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parse_();
                  if (input.substr(peg$currPos, 3) === peg$c7) {
                    s7 = peg$c7;
                    peg$currPos += 3;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e7); }
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parse_();
                    if (input.charCodeAt(peg$currPos) === 41) {
                      s9 = peg$c8;
                      peg$currPos++;
                    } else {
                      s9 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e8); }
                    }
                    if (s9 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s0 = peg$f12(s1, s3);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseTO() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parsenumber();
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    s1 = input.substring(s1, peg$currPos);
    s2 = peg$parse_();
    s3 = input.substr(peg$currPos, 2);
    if (s3.toLowerCase() === peg$c9) {
      peg$currPos += 2;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e9); }
    }
    if (s3 !== peg$FAILED) {
      s4 = peg$parse_();
      s5 = peg$currPos;
      s6 = peg$parsenumber();
      if (s6 === peg$FAILED) {
        s6 = null;
      }
      s5 = input.substring(s5, peg$currPos);
      s6 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f13(s1, s5);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCOMPARISON() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseCOMP_SYMBOL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parsenumber();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f14(s1, s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseNULLS() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 4);
    if (s1.toLowerCase() === peg$c10) {
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e10); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f15(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseLOGIC_SYMBOL() {
    var s0, s1;

    s0 = peg$parseCOMMA();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseOR();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f16();
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseOR() {
    var s0;

    s0 = input.substr(peg$currPos, 2);
    if (s0.toLowerCase() === peg$c4) {
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e4); }
    }

    return s0;
  }

  function peg$parseAND() {
    var s0;

    s0 = input.substr(peg$currPos, 3);
    if (s0.toLowerCase() === peg$c2) {
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e2); }
    }

    return s0;
  }

  function peg$parseCOMMA() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 44) {
      s0 = peg$c11;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e11); }
    }

    return s0;
  }

  function peg$parseOPEN() {
    var s0;

    s0 = input.charAt(peg$currPos);
    if (peg$r0.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e12); }
    }

    return s0;
  }

  function peg$parseCLOSE() {
    var s0;

    s0 = input.charAt(peg$currPos);
    if (peg$r1.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e13); }
    }

    return s0;
  }

  function peg$parseNOT_SYMBOL() {
    var s0, s1;

    s0 = input.substr(peg$currPos, 3);
    if (s0.toLowerCase() === peg$c12) {
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e14); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c13) {
        s0 = peg$c13;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e15); }
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c14) {
          s1 = peg$c14;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e16); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f17();
        }
        s0 = s1;
      }
    }

    return s0;
  }

  function peg$parseCOMP_SYMBOL() {
    var s0;

    s0 = peg$parseCOMP_G();
    if (s0 === peg$FAILED) {
      s0 = peg$parseCOMP_L();
    }

    return s0;
  }

  function peg$parseCOMP_G() {
    var s0;

    s0 = peg$parseGTE();
    if (s0 === peg$FAILED) {
      s0 = peg$parseGT();
    }

    return s0;
  }

  function peg$parseGTE() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c15) {
      s0 = peg$c15;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e17); }
    }

    return s0;
  }

  function peg$parseGT() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 62) {
      s0 = peg$c0;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }

    return s0;
  }

  function peg$parseCOMP_L() {
    var s0;

    s0 = peg$parseLTE();
    if (s0 === peg$FAILED) {
      s0 = peg$parseLT();
    }

    return s0;
  }

  function peg$parseLTE() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c16) {
      s0 = peg$c16;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e18); }
    }

    return s0;
  }

  function peg$parseLT() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 60) {
      s0 = peg$c3;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e3); }
    }

    return s0;
  }

  function peg$parseUSER_ATTRIBUTE() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseUA_START();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseATTRIBUTE();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseUA_END();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f18(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseUA_START() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c17) {
      s1 = peg$c17;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e19); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.substr(peg$currPos, 17) === peg$c18) {
        s3 = peg$c18;
        peg$currPos += 17;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e20); }
      }
      if (s3 !== peg$FAILED) {
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseUA_END() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 93) {
      s1 = peg$c19;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e21); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.substr(peg$currPos, 2) === peg$c20) {
        s3 = peg$c20;
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e22); }
      }
      if (s3 !== peg$FAILED) {
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseUA_SINGLE_QUOTE() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 39) {
      s0 = peg$c21;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e23); }
    }

    return s0;
  }

  function peg$parseUA_DOUBLE_QUOTE() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 34) {
      s0 = peg$c22;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e24); }
    }

    return s0;
  }

  function peg$parseATTRIBUTE() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseUA_SINGLE_QUOTE();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseUA_WORD();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseUA_SINGLE_QUOTE();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f19(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseUA_DOUBLE_QUOTE();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseUA_WORD();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseUA_DOUBLE_QUOTE();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f20(s2);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseUA_WORD() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseUA_CHARS();
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseUA_CHARS();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f21(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseUA_CHARS() {
    var s0;

    s0 = input.charAt(peg$currPos);
    if (peg$r2.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e25); }
    }

    return s0;
  }

  function peg$parsenumber() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseminus();
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    s3 = peg$parseint();
    if (s3 !== peg$FAILED) {
      s4 = peg$parsefrac();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parseexp();
      if (s5 === peg$FAILED) {
        s5 = null;
      }
      s2 = [s2, s3, s4, s5];
      s1 = s2;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f22();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseminus();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseint();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parsefrac();
      if (s4 !== peg$FAILED) {
        s5 = peg$parseexp();
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s2 = [s2, s3, s4, s5];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f23();
      }
      s0 = s1;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e26); }
    }

    return s0;
  }

  function peg$parsepositive() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseint();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsefrac();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseexp();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f24();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e27); }
    }

    return s0;
  }

  function peg$parsepositiveInteger() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseint();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f25();
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e28); }
    }

    return s0;
  }

  function peg$parseinteger() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseminus();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parseint();
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f26();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e29); }
    }

    return s0;
  }

  function peg$parsenot() {
    var s0;

    s0 = input.substr(peg$currPos, 3);
    if (s0.toLowerCase() === peg$c12) {
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e30); }
    }

    return s0;
  }

  function peg$parsedecimal_point() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 46) {
      s0 = peg$c23;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e31); }
    }

    return s0;
  }

  function peg$parsedigit1_9() {
    var s0;

    s0 = input.charAt(peg$currPos);
    if (peg$r3.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e32); }
    }

    return s0;
  }

  function peg$parsee() {
    var s0;

    s0 = input.charAt(peg$currPos);
    if (peg$r4.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e33); }
    }

    return s0;
  }

  function peg$parseexp() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parsee();
    if (s1 !== peg$FAILED) {
      s2 = input.charAt(peg$currPos);
      if (peg$r5.test(s2)) {
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e34); }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = [];
      s4 = peg$parseDIGIT();
      if (s4 !== peg$FAILED) {
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseDIGIT();
        }
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsefrac() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsedecimal_point();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseDIGIT();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseDIGIT();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseint() {
    var s0, s1, s2, s3;

    s0 = peg$parsezero();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsedigit1_9();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseDIGIT();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseDIGIT();
        }
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseminus() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 45) {
      s0 = peg$c24;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e35); }
    }

    return s0;
  }

  function peg$parseplus() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 43) {
      s0 = peg$c25;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e36); }
    }

    return s0;
  }

  function peg$parsezero() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 48) {
      s0 = peg$c26;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e37); }
    }

    return s0;
  }

  function peg$parseDIGIT() {
    var s0;

    s0 = input.charAt(peg$currPos);
    if (peg$r6.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e38); }
    }

    return s0;
  }

  function peg$parse_() {
    var s0, s1;

    peg$silentFails++;
    s0 = [];
    s1 = peg$parseSPACE();
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = peg$parseSPACE();
    }
    peg$silentFails--;
    s1 = peg$FAILED;
    if (peg$silentFails === 0) { peg$fail(peg$e39); }

    return s0;
  }

  function peg$parseSPACE() {
    var s0, s1;

    peg$silentFails++;
    s0 = [];
    s1 = input.charAt(peg$currPos);
    if (peg$r7.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e41); }
    }
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = input.charAt(peg$currPos);
        if (peg$r7.test(s1)) {
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e41); }
        }
      }
    } else {
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e40); }
    }

    return s0;
  }


  const Object = options.Object;
  const getNumberFromString = options.getNumberFromString;

  peg$result = peg$startRuleFunction();

  if (options.peg$library) {
    return /** @type {any} */ ({
      peg$result,
      peg$currPos,
      peg$FAILED,
      peg$maxFailExpected,
      peg$maxFailPos
    });
  }
  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

const peg$allowedStartRules = [
  "EXPRESSION"
];

export {
  peg$allowedStartRules as StartRules,
  peg$SyntaxError as SyntaxError,
  peg$parse as parse
};
